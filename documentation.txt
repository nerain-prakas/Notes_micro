==============================================
AngularJS Notes Micro App Documentation
==============================================

1. Introduction
---------------
The Notes Micro App is a single-page application built with AngularJS that provides users with a modern, responsive interface for managing digital notes. It follows the MVC (Model-View-Controller) architecture pattern and implements essential note-taking features with a focus on user experience.

2. Objective
------------
- Create a lightweight, efficient note-taking application
- Implement core CRUD operations for notes management
- Provide an intuitive, responsive user interface
- Demonstrate AngularJS 1.8.x best practices and patterns
- Implement local data persistence
- Support keyboard shortcuts for improved productivity

3. Tools & Technologies Used
---------------------------
- AngularJS 1.8.x: Core framework
- ngRoute: For routing and navigation
- ngAnimate: For smooth transitions
- HTML5/CSS3: Frontend structure and styling
- localStorage: Data persistence
- http-server: Local development server
- Prettier: Code formatting

4. System Architecture
---------------------
MVC Architecture Components:

a) Models (Services):
   - NotesService: Handles data operations and localStorage management

b) Views (HTML Templates):
   - index.html: Main application shell
   - notes-list.html: Grid view of notes
   - note-editor.html: Form for creating/editing notes

c) Controllers:
   - AppController: Main application controller
   - NotesController: Notes list management
   - NoteEditorController: Note editing logic

d) Directives:
   - noteCard: Reusable note component

5. Key Functionality
-------------------
- Create, Read, Update, Delete (CRUD) notes
- Pin important notes to top
- Mark notes as favorites
- Color-code notes
- Search functionality
- Sort notes by different criteria
- Light/dark theme toggle
- Keyboard shortcuts
- Responsive design

6. Code Implementation
---------------------

6.1 Main Application Structure (index.html):
------------------------------------------
```html
<!DOCTYPE html>
<html lang="en" ng-app="notesApp">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notes App</title>
  <!-- AngularJS and dependencies -->
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.3/angular.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.3/angular-route.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.3/angular-animate.min.js"></script>
  
  <!-- Application scripts -->
  <script src="app.module.js"></script>
  <script src="app.routes.js"></script>
  <script src="services/notes.service.js"></script>
  <script src="controllers/notes.controller.js"></script>
  <script src="components/note-card.directive.js"></script>
  <script src="components/note-editor.controller.js"></script>
  
  <!-- Styles -->
  <link rel="stylesheet" href="styles/main.css">
</head>
<body ng-class="{'dark-theme': isDarkTheme}" ng-controller="AppController">
  <div class="app-shell">
    <header class="app-header">
      <div class="search-bar">
        <input type="text" ng-model="searchQuery" placeholder="Search notes..." ng-model-options="{ debounce: 150 }">
      </div>
      <div class="actions">
        <select ng-model="sortOption" ng-change="updateSort()">
          <option value="-updatedAt">Updated</option>
          <option value="-createdAt">Created</option>
          <option value="title">Title</option>
        </select>
        <button ng-click="toggleTheme()" class="theme-toggle">Theme</button>
        <button ng-click="createNote()" class="new-note">New Note</button>
      </div>
    </header>
    <main ng-view class="main-content"></main>
  </div>
</body>
</html>
```

6.2 Application Module (app.module.js):
-------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp', ['ngRoute', 'ngAnimate'])
    .controller('AppController', AppController)
    .run(appRun);

  function AppController($scope, $rootScope, $location, NotesService) {
    $scope.isDarkTheme = localStorage.getItem('darkTheme') === 'true';
    $scope.searchQuery = '';
    $scope.sortOption = '-updatedAt';

    $scope.toggleTheme = function() {
      $scope.isDarkTheme = !$scope.isDarkTheme;
      localStorage.setItem('darkTheme', $scope.isDarkTheme);
    };

    $scope.createNote = function() {
      $location.path('/note/new');
    };

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      if (e.key === 'n') {
        $scope.createNote();
        $scope.$apply();
      } else if (e.key === '/') {
        document.querySelector('.search-bar input').focus();
        e.preventDefault();
      }
    });

    $scope.updateSort = function() {
      $rootScope.$broadcast('notes:sort', { option: $scope.sortOption });
    };
  }

  function appRun(NotesService) {
    if (!localStorage.getItem('notes')) {
      NotesService.seedDemo();
    }
  }
})();
```

6.3 Routing Configuration (app.routes.js):
----------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp')
    .config(routeConfig);

  function routeConfig($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'components/notes-list.html',
        controller: 'NotesController'
      })
      .when('/note/new', {
        templateUrl: 'components/note-editor.html',
        controller: 'NoteEditorController'
      })
      .when('/note/:id', {
        templateUrl: 'components/note-editor.html',
        controller: 'NoteEditorController'
      })
      .otherwise({
        redirectTo: '/'
      });
  }
})();
```

6.4 Notes Service (services/notes.service.js):
-------------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp')
    .service('NotesService', NotesService);

  function NotesService() {
    var service = {
      list: list,
      get: get,
      create: create,
      update: update,
      remove: remove,
      togglePin: togglePin,
      toggleFavorite: toggleFavorite,
      seedDemo: seedDemo
    };

    return service;

    function list() {
      var notes = JSON.parse(localStorage.getItem('notes') || '[]');
      return notes.sort(function(a, b) {
        if (a.pinned && !b.pinned) return -1;
        if (!a.pinned && b.pinned) return 1;
        if (a.favorite && !b.favorite) return -1;
        if (!a.favorite && b.favorite) return 1;
        return new Date(b.updatedAt) - new Date(a.updatedAt);
      });
    }

    function get(id) {
      var notes = list();
      return notes.find(function(note) {
        return note.id === id;
      });
    }

    function create(note) {
      var notes = list();
      note.id = Date.now().toString();
      note.createdAt = new Date().toISOString();
      note.updatedAt = note.createdAt;
      note.pinned = false;
      note.favorite = false;
      notes.push(note);
      localStorage.setItem('notes', JSON.stringify(notes));
      return note;
    }

    function update(note) {
      var notes = list();
      var index = notes.findIndex(function(n) {
        return n.id === note.id;
      });
      if (index > -1) {
        note.updatedAt = new Date().toISOString();
        notes[index] = note;
        localStorage.setItem('notes', JSON.stringify(notes));
      }
      return note;
    }

    function remove(id) {
      var notes = list();
      var filtered = notes.filter(function(note) {
        return note.id !== id;
      });
      localStorage.setItem('notes', JSON.stringify(filtered));
    }

    function togglePin(id) {
      var note = get(id);
      if (note) {
        note.pinned = !note.pinned;
        update(note);
      }
      return note;
    }

    function toggleFavorite(id) {
      var note = get(id);
      if (note) {
        note.favorite = !note.favorite;
        update(note);
      }
      return note;
    }

    function seedDemo() {
      var demoNotes = [
        {
          title: 'Welcome to Notes App!',
          content: 'This is a demo note to get you started. You can create, edit, and delete notes.',
          color: '#fff59d'
        },
        {
          title: 'Features',
          content: '‚ú® Create colorful notes\nüìå Pin important notes\n‚≠ê Mark favorites\nüé® Change theme\n‚å®Ô∏è Keyboard shortcuts',
          color: '#81c784'
        },
        {
          title: 'Keyboard Shortcuts',
          content: 'n - Create new note\n/ - Focus search\nEsc - Close dialogs',
          color: '#90caf9'
        }
      ];

      demoNotes.forEach(function(note) {
        create(note);
      });
    }
  }
})();
```

6.5 Notes Controller (controllers/notes.controller.js):
--------------------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp')
    .controller('NotesController', NotesController);

  function NotesController($scope, NotesService) {
    $scope.notes = [];
    $scope.searchQuery = '';
    $scope.sortOption = '-updatedAt';

    function loadNotes() {
      $scope.notes = NotesService.list();
    }

    $scope.deleteNote = function(id) {
      if (confirm('Are you sure you want to delete this note?')) {
        NotesService.remove(id);
        loadNotes();
      }
    };

    $scope.togglePin = function(id) {
      NotesService.togglePin(id);
      loadNotes();
    };

    $scope.toggleFavorite = function(id) {
      NotesService.toggleFavorite(id);
      loadNotes();
    };

    $scope.filterNotes = function(note) {
      if (!$scope.searchQuery) return true;
      var search = $scope.searchQuery.toLowerCase();
      return note.title.toLowerCase().includes(search) ||
             note.content.toLowerCase().includes(search);
    };

    loadNotes();

    $scope.$on('notes:sort', function(event, data) {
      $scope.sortOption = data.option;
    });
  }
})();
```

6.6 Note Editor Controller (components/note-editor.controller.js):
-------------------------------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp')
    .controller('NoteEditorController', NoteEditorController);

  function NoteEditorController($scope, $routeParams, $location, NotesService) {
    $scope.note = {
      title: '',
      content: '',
      color: '#ffffff'
    };

    $scope.colors = [
      '#ffffff', // White
      '#fff59d', // Yellow
      '#81c784', // Green
      '#90caf9', // Blue
      '#f48fb1', // Pink
      '#ce93d8', // Purple
      '#ff8a65', // Orange
      '#a1887f'  // Brown
    ];

    if ($routeParams.id && $routeParams.id !== 'new') {
      var existingNote = NotesService.get($routeParams.id);
      if (existingNote) {
        $scope.note = angular.copy(existingNote);
      } else {
        $location.path('/');
      }
    }

    $scope.save = function() {
      if (!$scope.note.title) {
        alert('Title is required!');
        return;
      }

      if ($scope.note.id) {
        NotesService.update($scope.note);
      } else {
        NotesService.create($scope.note);
      }
      
      $location.path('/');
    };

    $scope.cancel = function() {
      $location.path('/');
    };

    $scope.selectColor = function(color) {
      $scope.note.color = color;
    };

    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        $scope.cancel();
        $scope.$apply();
      }
    });
  }
})();
```

6.7 Note Card Directive (components/note-card.directive.js):
-------------------------------------------------------
```javascript
(function() {
  'use strict';

  angular
    .module('notesApp')
    .directive('noteCard', noteCard);

  function noteCard() {
    return {
      restrict: 'E',
      scope: {
        note: '=',
        onDelete: '&',
        onPin: '&',
        onFavorite: '&'
      },
      template: `
        <div class="note-card" 
             ng-class="{'pinned': note.pinned, 'favorite': note.favorite}"
             ng-style="{'background-color': note.color}">
          <div class="note-content">
            <h3>{{note.title}}</h3>
            <p>{{note.content}}</p>
          </div>
          <div class="note-actions">
            <button ng-click="onPin({id: note.id})" title="Toggle pin">
              üìå
            </button>
            <button ng-click="onFavorite({id: note.id})" title="Toggle favorite">
              ‚≠ê
            </button>
            <button ng-click="onDelete({id: note.id})" title="Delete note">
              üóëÔ∏è
            </button>
          </div>
        </div>
      `,
      link: function(scope, element) {
        element.on('click', function(e) {
          if (e.target.tagName !== 'BUTTON') {
            window.location.href = '#!/note/' + scope.note.id;
          }
        });
      }
    };
  }
})();
```

6.8 Notes List Template (components/notes-list.html):
------------------------------------------------
```html
<div class="notes-grid">
  <div ng-if="!notes.length" class="empty-state">
    <h2>No notes found</h2>
    <p>Create your first note by clicking the "New Note" button</p>
  </div>
  <note-card ng-repeat="note in notes | filter:filterNotes | orderBy:sortOption"
             note="note"
             on-delete="deleteNote(id)"
             on-pin="togglePin(id)"
             on-favorite="toggleFavorite(id)">
  </note-card>
</div>
```

6.9 Note Editor Template (components/note-editor.html):
-------------------------------------------------
```html
<div class="note-editor">
  <h2>{{note.id ? 'Edit Note' : 'New Note'}}</h2>
  
  <form ng-submit="save()">
    <div class="form-group">
      <input type="text" 
             ng-model="note.title" 
             placeholder="Title" 
             maxlength="100" 
             required>
    </div>
    
    <div class="form-group">
      <textarea ng-model="note.content" 
                placeholder="Note content..." 
                rows="6"></textarea>
    </div>
    
    <div class="color-picker">
      <div ng-repeat="color in colors" 
           class="color-option" 
           ng-class="{'selected': note.color === color}"
           ng-style="{'background-color': color}"
           ng-click="selectColor(color)">
      </div>
    </div>
    
    <div class="form-actions">
      <button type="button" ng-click="cancel()">Cancel</button>
      <button type="submit">Save</button>
    </div>
  </form>
</div>
```

7. Main CSS Styles (styles/main.css):
----------------------------------
```css
:root {
  --primary-color: #2196f3;
  --bg-color: #ffffff;
  --text-color: #333333;
  --card-bg: #ffffff;
  --shadow: 0 2px 4px rgba(0,0,0,0.1);
  --hover-shadow: 0 4px 8px rgba(0,0,0,0.15);
  --border-color: #e0e0e0;
}

.dark-theme {
  --bg-color: #1e1e1e;
  --text-color: #ffffff;
  --card-bg: #2d2d2d;
  --shadow: 0 2px 4px rgba(0,0,0,0.2);
  --hover-shadow: 0 4px 8px rgba(0,0,0,0.3);
  --border-color: #404040;
}

body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: background-color 0.2s, color 0.2s;
}

.app-shell {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.app-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.search-bar input {
  padding: 8px 16px;
  border: 1px solid var(--border-color);
  border-radius: 20px;
  font-size: 16px;
  width: 300px;
  background-color: var(--card-bg);
  color: var(--text-color);
}

.actions {
  display: flex;
  gap: 10px;
}

button {
  padding: 8px 16px;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  background-color: var(--primary-color);
  color: white;
  font-size: 14px;
  transition: transform 0.15s, background-color 0.15s;
}

button:hover {
  transform: translateY(-1px);
  background-color: #1976d2;
}

select {
  padding: 8px 16px;
  border: 1px solid var(--border-color);
  border-radius: 20px;
  background-color: var(--card-bg);
  color: var(--text-color);
  font-size: 14px;
}

.notes-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 20px;
  padding: 20px 0;
}

.note-card {
  background-color: var(--card-bg);
  border-radius: 8px;
  padding: 16px;
  box-shadow: var(--shadow);
  transition: box-shadow 0.2s, transform 0.2s;
  cursor: pointer;
}

.note-card:hover {
  box-shadow: var(--hover-shadow);
  transform: translateY(-2px);
}

.note-card.pinned {
  border: 2px solid var(--primary-color);
}

.note-card.favorite::after {
  content: "‚òÖ";
  position: absolute;
  top: 8px;
  right: 8px;
  color: gold;
}

.note-actions {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
  margin-top: 12px;
}

.note-editor {
  background-color: var(--card-bg);
  padding: 20px;
  border-radius: 8px;
  box-shadow: var(--shadow);
}

.note-editor input,
.note-editor textarea {
  width: 100%;
  padding: 8px;
  margin-bottom: 16px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--bg-color);
  color: var(--text-color);
}

.color-picker {
  display: flex;
  gap: 8px;
  margin-bottom: 16px;
}

.color-option {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  cursor: pointer;
  border: 2px solid transparent;
}

.color-option.selected {
  border-color: var(--primary-color);
}
```

8. Package Configuration (package.json):
------------------------------------
```json
{
  "name": "angularjs-notes-micro-app",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "start": "npx http-server -c-1 -p 5173 .",
    "build": "mkdir -p dist && cp -r index.html styles components controllers services assets dist",
    "format": "npx prettier --write \"**/*.{js,css,html,json,md}\""
  },
  "devDependencies": {
    "http-server": "^14.1.1",
    "prettier": "^3.3.3"
  }
}
```

This documentation provides a comprehensive overview of the Notes micro app implementation, including its architecture, functionality, and complete code base. Each section of code is documented with its purpose and functionality, making it easy to understand and maintain the application.